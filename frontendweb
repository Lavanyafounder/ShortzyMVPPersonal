import React, { useEffect, useMemo, useRef, useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Play, Upload, Heart, ThumbsUp, Film, TrendingUp, Rocket, Search, PlusCircle, BarChart, Users, Star, DollarSign, Sparkles, MessageCircle } from "lucide-react";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Area, AreaChart, BarChart as RBarChart, Bar } from "recharts";

/**
 * Shortzy! MVP – Single-file React prototype
 * ------------------------------------------------------------
 * What this includes (client-only, persists to localStorage):
 * - Viewer feed of short projects with episodes, voting (greenlight), follow, like
 * - Creator pitching flow: logline, mood, target audience, budget ask, episode plan
 * - Simple "AI Proof" placeholder that turns a script into a storyboard shot list
 * - Creator upload (mock): add an episode via URL and poster, attach to a project
 * - Basic insights dashboard with funnel & engagement charts (mock data)
 * - Search & filter by genre/tags; lightweight recommendations
 *
 * Notes:
 * - This is a front-end MVP sketch meant for rapid iteration & demos.
 * - Replace mock assets with real API when the backend is ready.
 * - Tailwind + shadcn/ui for styling; recharts for charts; lucide for icons.
 */

// ------------------------ Helpers & Storage ------------------------
const LS_KEY = "shortzy_state_v1";

function loadState() {
  try {
    const raw = localStorage.getItem(LS_KEY);
    if (!raw) return null;
    return JSON.parse(raw);
  } catch (_) {
    return null;
  }
}

function saveState(state) {
  try {
    localStorage.setItem(LS_KEY, JSON.stringify(state));
  } catch (_) {}
}

function uid(prefix = "id") {
  return `${prefix}_${Math.random().toString(36).slice(2, 9)}`;
}

function currency(n) {
  return new Intl.NumberFormat(undefined, { style: "currency", currency: "USD", maximumFractionDigits: 0 }).format(n || 0);
}

// ----------------------------- Types ------------------------------
/**
 * Project: { id, title, creator, avatar, tags[], logline, audience, mood, genre, budgetAsk, raised, followers[], likes, votes, episodes[], createdAt }
 * Episode: { id, title, description, videoUrl, posterUrl, durationSec }
 */

const SAMPLE_CREATORS = [
  { name: "Mangalani", avatar: "MG" },
  { name: "Kite & Knife", avatar: "KK" },
  { name: "Orbit Pictures", avatar: "OP" },
  { name: "Red Thread", avatar: "RT" },
];

const SAMPLE_TAGS = ["Thriller", "Romance", "Comedy", "Sci-Fi", "Mystery", "Drama", "Fantasy", "Horror"];

const STARTER_PROJECTS = [
  {
    id: uid("prj"),
    title: "Oracle",
    creator: SAMPLE_CREATORS[0].name,
    avatar: SAMPLE_CREATORS[0].avatar,
    tags: ["Thriller", "Mystery"],
    logline: "A violinist haunted by prophetic glitches must stop a murder only she can see in fragments.",
    audience: "18-34 genre fans who love Black Mirror x Fleabag tone",
    mood: "Dark, sultry, electric, intimate",
    genre: "Thriller",
    budgetAsk: 75000,
    raised: 22000,
    followers: [],
    likes: 1430,
    votes: 987,
    createdAt: Date.now() - 1000 * 60 * 60 * 24 * 8,
    episodes: [
      {
        id: uid("ep"),
        title: "Pilot – The Glitch",
        description: "First sighting. Reality tears like film stock.",
        videoUrl: "",
        posterUrl:
          "data:image/svg+xml;utf8," +
          encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='800' height='450'><rect width='100%' height='100%' fill='#111'/><text x='50%' y='50%' fill='#fff' font-size='28' text-anchor='middle' dominant-baseline='middle'>Oracle – Poster</text></svg>`),
        durationSec: 108,
      },
    ],
  },
  {
    id: uid("prj"),
    title: "Chartreuse",
    creator: SAMPLE_CREATORS[2].name,
    avatar: SAMPLE_CREATORS[2].avatar,
    tags: ["Comedy", "Adventure"],
    logline: "Two friends infiltrate a silent monastery to steal a legendary liqueur recipe and save their bromance.",
    audience: "Gen Z/young millennial buddy-comedy crowd",
    mood: "Warm, offbeat, earnest chaos",
    genre: "Comedy",
    budgetAsk: 50000,
    raised: 12000,
    followers: [],
    likes: 780,
    votes: 412,
    createdAt: Date.now() - 1000 * 60 * 60 * 24 * 3,
    episodes: [
      {
        id: uid("ep"),
        title: "Cold Open – Vows",
        description: "They thought vows meant quiet. They were wrong.",
        videoUrl: "",
        posterUrl:
          "data:image/svg+xml;utf8," +
          encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='800' height='450'><rect width='100%' height='100%' fill='#0a2'/><text x='50%' y='50%' fill='#fff' font-size='28' text-anchor='middle' dominant-baseline='middle'>Chartreuse – Poster</text></svg>`),
        durationSec: 92,
      },
    ],
  },
];

// --------------------------- Root App -----------------------------
export default function ShortzyMVP() {
  const [tab, setTab] = useState("watch");
  const [state, setState] = useState(() => loadState() || { projects: STARTER_PROJECTS, me: { id: "me", name: "You", following: [], liked: [] } });
  const [q, setQ] = useState("");
  const [tagFilter, setTagFilter] = useState("");

  useEffect(() => saveState(state), [state]);

  const projects = useMemo(() => {
    let list = [...state.projects].sort((a, b) => b.createdAt - a.createdAt);
    if (q.trim()) list = list.filter(p => matchText(p, q));
    if (tagFilter) list = list.filter(p => p.tags.includes(tagFilter));
    return list;
  }, [state.projects, q, tagFilter]);

  const follow = (p) => setState(s => {
    const me = { ...s.me };
    const following = new Set(me.following);
    if (following.has(p.id)) following.delete(p.id); else following.add(p.id);
    me.following = [...following];
    return { ...s, me };
  });

  const like = (p) => setState(s => {
    const me = { ...s.me };
    const liked = new Set(me.liked);
    const projects = s.projects.map(px => {
      if (px.id !== p.id) return px;
      const next = { ...px };
      if (liked.has(p.id)) { liked.delete(p.id); next.likes = Math.max(0, next.likes - 1); }
      else { liked.add(p.id); next.likes += 1; }
      return next;
    });
    me.liked = [...liked];
    return { ...s, me, projects };
  });

  const vote = (p) => setState(s => ({
    ...s,
    projects: s.projects.map(px => (px.id === p.id ? { ...px, votes: px.votes + 1, raised: Math.min(px.budgetAsk, px.raised + Math.round(px.budgetAsk * 0.01)) } : px)),
  }));

  const addProject = (data) => setState(s => ({ ...s, projects: [{ ...data, id: uid("prj"), createdAt: Date.now(), followers: [], likes: 0, votes: 0, raised: 0, episodes: [] }, ...s.projects] }));

  const addEpisode = (projectId, ep) => setState(s => ({
    ...s,
    projects: s.projects.map(px => (px.id === projectId ? { ...px, episodes: [{ ...ep, id: uid("ep") }, ...px.episodes] } : px)),
  }));

  return (
    <div className="min-h-screen w-full bg-neutral-50 text-neutral-900">
      <header className="sticky top-0 z-10 backdrop-blur bg-white/80 border-b">
        <div className="max-w-6xl mx-auto flex items-center justify-between p-4">
          <div className="flex items-center gap-2">
            <Sparkles className="h-6 w-6" />
            <h1 className="text-2xl font-bold">Shortzy!</h1>
          </div>
          <div className="flex items-center gap-2">
            <div className="hidden md:flex items-center gap-2">
              <Search className="h-4 w-4" />
              <Input placeholder="Search projects, creators, tags…" className="w-80" value={q} onChange={e => setQ(e.target.value)} />
            </div>
            <Badge variant="secondary">MVP</Badge>
          </div>
        </div>
        <div className="border-t">
          <div className="max-w-6xl mx-auto px-4">
            <Tabs value={tab} onValueChange={setTab} className="w-full">
              <TabsList className="grid grid-cols-4 w-full">
                <TabsTrigger value="watch" className="flex items-center gap-2"><Play className="h-4 w-4"/> Watch</TabsTrigger>
                <TabsTrigger value="pitch" className="flex items-center gap-2"><Rocket className="h-4 w-4"/> Pitch</TabsTrigger>
                <TabsTrigger value="create" className="flex items-center gap-2"><Upload className="h-4 w-4"/> Create</TabsTrigger>
                <TabsTrigger value="insights" className="flex items-center gap-2"><BarChart className="h-4 w-4"/> Insights</TabsTrigger>
              </TabsList>
            </Tabs>
          </div>
        </div>
      </header>

      <main className="max-w-6xl mx-auto p-4">
        {tab === "watch" && (
          <WatchFeed projects={projects} me={state.me} onFollow={follow} onLike={like} onVote={vote} tagFilter={tagFilter} setTagFilter={setTagFilter} />
        )}
        {tab === "pitch" && (
          <PitchForm onCreate={addProject} />
        )}
        {tab === "create" && (
          <CreateEpisode projects={state.projects} onAdd={addEpisode} />
        )}
        {tab === "insights" && (
          <Insights projects={state.projects} />
        )}
      </main>

      <footer className="border-t mt-10 py-6 text-center text-sm text-neutral-500">Made with ♥ for early-stage filmmakers · Shortzy! MVP</footer>
    </div>
  );
}

function matchText(p, q) {
  const hay = `${p.title} ${p.creator} ${p.genre} ${p.logline} ${p.tags.join(" ")}`.toLowerCase();
  return q.toLowerCase().split(/\s+/).every(tok => hay.includes(tok));
}

// --------------------------- Watch Feed ---------------------------
function WatchFeed({ projects, me, onFollow, onLike, onVote, tagFilter, setTagFilter }) {
  return (
    <div className="grid grid-cols-1 lg:grid-cols-[260px_1fr] gap-6">
      <aside className="space-y-4">
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Filters</CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="flex flex-wrap gap-2">
              {["All", ...SAMPLE_TAGS].map(tag => (
                <Button key={tag} variant={tagFilter === tag || (tag === "All" && !tagFilter) ? "default" : "secondary"} size="sm" onClick={() => setTagFilter(tag === "All" ? "" : tag)}>
                  {tag}
                </Button>
              ))}
            </div>
            <div className="text-xs text-neutral-500">Tip: Vote to push projects toward greenlight. Follow creators you like.</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle className="text-base">For You</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {projects.slice(0, 3).map(p => (
                <div key={p.id} className="flex items-center gap-3">
                  <Avatar className="h-8 w-8"><AvatarFallback>{p.avatar}</AvatarFallback></Avatar>
                  <div className="text-sm">
                    <div className="font-medium leading-none">{p.title}</div>
                    <div className="text-neutral-500">by {p.creator}</div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </aside>

      <section className="space-y-6">
        {projects.map(p => (
          <Card key={p.id} className="overflow-hidden">
            <CardHeader className="flex-row items-center justify-between">
              <div className="flex items-center gap-3">
                <Avatar className="h-10 w-10"><AvatarFallback>{p.avatar}</AvatarFallback></Avatar>
                <div>
                  <CardTitle>{p.title}</CardTitle>
                  <div className="text-sm text-neutral-500">by {p.creator} · {p.genre}</div>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Button variant={me.following.includes(p.id) ? "default" : "secondary"} onClick={() => onFollow(p)} size="sm">
                  <Users className="h-4 w-4 mr-1"/>{me.following.includes(p.id) ? "Following" : "Follow"}
                </Button>
                <Button variant="ghost" onClick={() => onLike(p)} size="icon" aria-label="like">
                  <Heart className={`h-5 w-5 ${me.liked.includes(p.id) ? "fill-red-500 text-red-500" : ""}`}/>
                </Button>
              </div>
            </CardHeader>
            <CardContent className="grid md:grid-cols-[1.4fr_1fr] gap-6">
              <div>
                {p.episodes[0] ? (
                  <PosterPlayer ep={p.episodes[0]} />
                ) : (
                  <div className="aspect-video bg-neutral-200 rounded-2xl grid place-items-center">
                    <Film className="h-10 w-10" />
                  </div>
                )}
                <div className="mt-3 flex flex-wrap gap-2">
                  {p.tags.map(t => <Badge key={t} variant="secondary">{t}</Badge>)}
                </div>
                <p className="mt-3 text-sm text-neutral-700">{p.logline}</p>
                <div className="mt-3 flex items-center gap-3 text-sm text-neutral-600">
                  <div className="flex items-center gap-1"><ThumbsUp className="h-4 w-4"/>{p.votes}</div>
                  <div className="flex items-center gap-1"><Heart className="h-4 w-4"/>{p.likes}</div>
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <div className="text-sm font-medium">Greenlight Progress</div>
                    <div className="text-xs text-neutral-500">{currency(p.raised)} / {currency(p.budgetAsk)}</div>
                  </div>
                  <Progress value={Math.round((p.raised / p.budgetAsk) * 100)} />
                </div>
                <div className="grid grid-cols-2 gap-2">
                  <Button onClick={() => onVote(p)} className="w-full"><TrendingUp className="h-4 w-4 mr-2"/>Vote to Greenlight</Button>
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button variant="secondary" className="w-full"><DollarSign className="h-4 w-4 mr-2"/>Pledge (Mock)</Button>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>Pledge (Mock)</DialogTitle>
                      </DialogHeader>
                      <p className="text-sm text-neutral-600">In a real build this would connect to Stripe to take small pledges or pre-buys. For the MVP, voting increments a simulated raise.</p>
                    </DialogContent>
                  </Dialog>
                </div>
                <Card className="border-dashed">
                  <CardHeader>
                    <CardTitle className="text-sm">Creator Notes</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm text-neutral-700">Audience: {p.audience}</p>
                    <p className="text-sm text-neutral-700">Mood: {p.mood}</p>
                  </CardContent>
                </Card>
              </div>
            </CardContent>
          </Card>
        ))}
      </section>
    </div>
  );
}

function PosterPlayer({ ep }) {
  const [open, setOpen] = useState(false);
  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <div className="cursor-pointer group relative">
          <img src={ep.posterUrl} alt={ep.title} className="rounded-2xl w-full aspect-video object-cover"/>
          <div className="absolute inset-0 grid place-items-center">
            <Button size="icon" className="rounded-full opacity-90 group-hover:opacity-100"><Play className="h-5 w-5"/></Button>
          </div>
        </div>
      </DialogTrigger>
      <DialogContent className="max-w-3xl">
        <DialogHeader>
          <DialogTitle>{ep.title}</DialogTitle>
        </DialogHeader>
        <div className="aspect-video bg-black rounded-xl grid place-items-center text-white text-sm">
          Mock Player – supply video URL in Create → Add Episode
        </div>
        <div className="text-xs text-neutral-500">{Math.round(ep.durationSec/60)}m {ep.durationSec%60}s</div>
      </DialogContent>
    </Dialog>
  );
}

// --------------------------- Pitch Form ---------------------------
function PitchForm({ onCreate }) {
  const [title, setTitle] = useState("");
  const [creator, setCreator] = useState(SAMPLE_CREATORS[0].name);
  const [genre, setGenre] = useState("Thriller");
  const [tags, setTags] = useState(["Thriller"]);
  const [logline, setLogline] = useState("");
  const [audience, setAudience] = useState("");
  const [mood, setMood] = useState("");
  const [budgetAsk, setBudgetAsk] = useState(25000);
  const [script, setScript] = useState("");
  const [storyboard, setStoryboard] = useState([]);

  function toggleTag(t) {
    setTags(prev => (prev.includes(t) ? prev.filter(x => x !== t) : [...prev, t]));
  }

  function buildStoryboard() {
    // Ultra-simplified "AI" mock: split script into shots by sentences
    const sentences = script
      .split(/[.!?]/)
      .map(s => s.trim())
      .filter(Boolean);
    const shots = sentences.slice(0, 12).map((s, i) => ({
      id: uid("shot"),
      shot: `Shot ${i + 1}`,
      desc: s,
      lens: ["24mm", "35mm", "50mm", "85mm"][i % 4],
      move: ["Static", "Push-in", "Handheld", "Pan"][i % 4],
      mood: ["Moody", "Warm", "Neutral"][i % 3],
    }));
    setStoryboard(shots);
  }

  function submit() {
    if (!title || !logline) return alert("Title & logline are required");
    onCreate({ title, creator, avatar: initials(creator), tags, logline, audience, mood, genre, budgetAsk: Number(budgetAsk) });
    setTitle(""); setLogline(""); setAudience(""); setMood(""); setBudgetAsk(25000); setScript(""); setStoryboard([]);
  }

  return (
    <div className="grid lg:grid-cols-2 gap-6">
      <Card>
        <CardHeader>
          <CardTitle>Pitch a Project</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <Input placeholder="Project Title" value={title} onChange={e => setTitle(e.target.value)} />
          <div className="grid grid-cols-2 gap-2">
            <Input placeholder="Creator" value={creator} onChange={e => setCreator(e.target.value)} />
            <Input placeholder="Genre" value={genre} onChange={e => setGenre(e.target.value)} />
          </div>
          <Textarea placeholder="One-sentence logline" value={logline} onChange={e => setLogline(e.target.value)} />
          <Textarea placeholder="Target audience (who will love this?)" value={audience} onChange={e => setAudience(e.target.value)} />
          <Textarea placeholder="Mood & tone keywords" value={mood} onChange={e => setMood(e.target.value)} />
          <div>
            <div className="text-sm font-medium mb-2">Tags</div>
            <div className="flex flex-wrap gap-2">
              {SAMPLE_TAGS.map(t => (
                <Button key={t} size="sm" variant={tags.includes(t) ? "default" : "secondary"} onClick={() => toggleTag(t)}>{t}</Button>
              ))}
            </div>
          </div>
          <div>
            <div className="text-sm font-medium">Budget Ask</div>
            <Input type="number" value={budgetAsk} onChange={e => setBudgetAsk(e.target.value)} />
          </div>
          <div className="flex gap-2">
            <Button onClick={submit}><PlusCircle className="h-4 w-4 mr-2"/>Create Project</Button>
            <Badge variant="outline" className="flex items-center gap-1"><Star className="h-4 w-4"/> Strong loglines convert best</Badge>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>AI Proof (Storyboard Draft)</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <Textarea placeholder="Paste 2–3 paragraphs of your pilot scene. The MVP will turn sentences into a rough shot list." value={script} onChange={e => setScript(e.target.value)} rows={8} />
          <div className="flex gap-2">
            <Button variant="secondary" onClick={buildStoryboard}><Sparkles className="h-4 w-4 mr-2"/>Generate Storyboard</Button>
          </div>
          {!!storyboard.length && (
            <div className="grid sm:grid-cols-2 gap-3">
              {storyboard.map(s => (
                <Card key={s.id} className="border-dashed">
                  <CardHeader className="py-3">
                    <CardTitle className="text-sm">{s.shot}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-sm mb-2">{s.desc}</div>
                    <div className="flex flex-wrap gap-2 text-xs text-neutral-600">
                      <Badge variant="secondary">{s.lens}</Badge>
                      <Badge variant="secondary">{s.move}</Badge>
                      <Badge variant="secondary">{s.mood}</Badge>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

function initials(name) {
  const parts = name.split(/\s+/).filter(Boolean);
  if (!parts.length) return "CR";
  if (parts.length === 1) return parts[0].slice(0, 2).toUpperCase();
  return (parts[0][0] + parts[1][0]).toUpperCase();
}

// -------------------------- Create Episode ------------------------
function CreateEpisode({ projects, onAdd }) {
  const [projectId, setProjectId] = useState(projects[0]?.id || "");
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [videoUrl, setVideoUrl] = useState("");
  const [posterUrl, setPosterUrl] = useState("");
  const [durationSec, setDurationSec] = useState(90);

  function add() {
    if (!projectId || !title) return alert("Pick a project & enter a title");
    onAdd(projectId, { title, description, videoUrl, posterUrl: posterUrl || placeholderPoster(title), durationSec: Number(durationSec) });
    setTitle(""); setDescription(""); setVideoUrl(""); setPosterUrl(""); setDurationSec(90);
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Add an Episode</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid md:grid-cols-2 gap-3">
          <select className="w-full border rounded-md p-2" value={projectId} onChange={e => setProjectId(e.target.value)}>
            {projects.map(p => <option key={p.id} value={p.id}>{p.title}</option>)}
          </select>
          <Input placeholder="Episode Title" value={title} onChange={e => setTitle(e.target.value)} />
          <Textarea className="md:col-span-2" placeholder="Description" value={description} onChange={e => setDescription(e.target.value)} />
          <Input placeholder="Video URL (mp4/hls) – optional for mock" value={videoUrl} onChange={e => setVideoUrl(e.target.value)} />
          <Input placeholder="Poster Image URL (optional)" value={posterUrl} onChange={e => setPosterUrl(e.target.value)} />
          <Input type="number" placeholder="Duration (sec)" value={durationSec} onChange={e => setDurationSec(e.target.value)} />
        </div>
        <div className="flex gap-2">
          <Button onClick={add}><Upload className="h-4 w-4 mr-2"/>Add Episode</Button>
          <Badge variant="outline" className="flex items-center gap-1"><MessageCircle className="h-4 w-4"/> Keep clips 30s–2m</Badge>
        </div>
      </CardContent>
    </Card>
  );
}

function placeholderPoster(title) {
  return (
    "data:image/svg+xml;utf8," +
    encodeURIComponent(
      `<svg xmlns='http://www.w3.org/2000/svg' width='800' height='450'><defs><linearGradient id='g' x1='0' y1='0' x2='1' y2='1'><stop offset='0%' stop-color='#111'/><stop offset='100%' stop-color='#333'/></linearGradient></defs><rect width='100%' height='100%' fill='url(#g)'/><text x='50%' y='50%' fill='#fff' font-size='28' text-anchor='middle' dominant-baseline='middle'>${title.replace(/&/g, '&amp;')}</text></svg>`
    )
  );
}

// ----------------------------- Insights ---------------------------
function Insights({ projects }) {
  const funnel = [
    { step: "Views", value: 12000 },
    { step: "Likes", value: 3200 },
    { step: "Votes", value: 1800 },
    { step: "Follows", value: 900 },
    { step: "Pledges", value: 260 },
  ];

  const weekly = Array.from({ length: 8 }).map((_, i) => ({ week: `W${i + 1}`, MAU: 1000 + i * 220, Votes: 200 + i * 60 }));
  const funding = projects.map(p => ({ name: p.title.slice(0, 10), Raised: p.raised, Target: p.budgetAsk }));

  return (
    <div className="grid lg:grid-cols-3 gap-6">
      <Card className="lg:col-span-2">
        <CardHeader>
          <CardTitle>Growth (Weekly)</CardTitle>
        </CardHeader>
        <CardContent className="h-64">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={weekly}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="week" />
              <YAxis />
              <Tooltip />
              <Line type="monotone" dataKey="MAU" />
              <Line type="monotone" dataKey="Votes" />
            </LineChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Engagement Funnel</CardTitle>
        </CardHeader>
        <CardContent className="h-64">
          <ResponsiveContainer width="100%" height="100%">
            <AreaChart data={funnel}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="step" />
              <YAxis />
              <Tooltip />
              <Area type="monotone" dataKey="value" />
            </AreaChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>

      <Card className="lg:col-span-3">
        <CardHeader>
          <CardTitle>Funding Progress by Project</CardTitle>
        </CardHeader>
        <CardContent className="h-72">
          <ResponsiveContainer width="100%" height="100%">
            <RBarChart data={funding}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="Raised" />
              <Bar dataKey="Target" />
            </RBarChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>
    </div>
  );
}
